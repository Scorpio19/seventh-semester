= Práctica #3: Aproximación de PI con fork y join en Java
:author: Diego Galíndez Barreda (A01370815), Eduardo Vatzuri Gaytán Martinez (A01165988)
:lang: es
:email: dgalindez1@gmail.com, A01165988@itesm.mx 
:encoding: utf-8
:revdate: 1 de septiembre, 2015.
:numbered:

Este reporte fue elaborado para el curso de _Programación multinúcleo_ del Tecnológico de Monterrey, Campus Estado de México.  

:numbered:

== Introducción
Durante la práctica se está realizando una aproximación al valor de PI usando
una integral ya definida. Esta aproximación se hace tanto de forma serial como
de forma secuencial. Esta última usando forks y joins de java, así como una
ForkJoinPool.

[NOTE]
.Hardware y software utilizado
=============================
Los programas se probaron en una laptop con las siguientes características:

- Procesador Intel Core i5-4200U de 1.60GHz con dos núcleos y cuatro hyperthreads.
- 5.7 GiB de memoria RAM.
- Sistema operativo Ubuntu 14.04, kernel de Linux 3.19.0-25 de 64 bits.
- Compilador Java 1.8.0_51 de Oracle.
=============================

== Solución secuencial
A continuación se anexa el codigo fuente de la solución secuencial para
aproximar PI con 1,000,000,000 rectas;

[source,java]
----------------------------
include::PiSequential.java[]
----------------------------

Se muestra la aproximación con todos los dígitos que java consigue así como el
tiempo que le tomó al programa ejecutarse. No se considera el tiempo de
asignación de valores a las variables ni los tiempos de impresión.

A continuación está la salida del programa:

[source,text]
----------------------------
Computed pi = 3.1415926535899708
Time: 17.797
----------------------------

== Solución paralela
A continuación se anexa el codigo fuente de la solución paralela para
aproximar PI con 1,000,000,000 rectas usando divisiones de 1,000,000 para hacer
las divisiones de los forks, ya que usando un número menor la aproximación
difiere demasiado con la secuencial, esto es debido a la pérdida de precisión en
los doubles:

[source,java]
----------------------------
include::ForkPi.java[]
----------------------------

Se muestra la aproximación con todos los dígitos que java consigue así como el
tiempo que le tomó al programa ejecutarse. No se considera el tiempo de
asignación de valores a las variables ni los tiempos de impresión.

A continuación está la salida del programa:

[source,text]
----------------------------
Computed pi = 3.141594261585145
Time: 3.107
----------------------------

== Resultados
A continuación mostramos varias corridas de ambos programas:

.Tiempos de ejecución de la aproximación secuencial 
[options="header,footer", cols="^,^", width="70%"]
|=======================
| # de corrida     | Tiempo T~1~ (segundos)
| 1                | 17.797
| 2                | 17.79
| 3                | 17.377
| 4                | 17.458
| 5                | 17.435
| Media aritmética | 17.5534
|=======================

.Tiempos de ejecución de la aproximación en paralelo 
[options="header,footer", cols="^,^", width="70%"]
|=======================
| # de corrida     | Tiempo T~2~ (segundos)
| 1                | 3.107
| 2                | 3.128
| 3                | 3.107
| 4                | 3.110
| 5                | 3.126
| Media aritmética | 3.116
|=======================

El speedup es de: 5.63X

En el caso paralelo, vemos una variación con la aproximación secuencial.
Esto se debe a problemas de redondeo al hacer las sumas por separado en cada 
uno de los procesos diferentes. También podemos ver que tiene un aumento de 
veocidad de ejecución en el caso paralelo bastante significativo, lo cual
justifica la pérdida de precisión para algunos casos.

En este caso, al tratarse de una aproximación es aceptable que haya una
variación pequeña en los resultados obtenidos. Sin embargo, entre menor sea la
división que se hace para cada fork y mayor la cantidad de rectas, mayor será 
esta variación en los resultados, lo cual puede ser no deseado para ciertas aplicaciones. 
Sin embargo, puede resultar conveniente por el aumento de velocidad, en caso que la 
aplicación que lo requiere acepte la ligera desviación.

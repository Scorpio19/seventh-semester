var search_data = {"index":{"searchIndex":["inactiverecord","object","pickcontroller","picks","pollcontroller","polls","usercontroller","users","all()","all()","belongs_to()","close()","conclude()","create()","create()","create()","create_from_results()","create_from_results()","create_from_results()","create_from_results()","current()","find()","get_and_clear_message()","has_many()","has_one()","login()","matches()","new()","new()","new()","parse_matches()","parse_params()","register()","results()","save()","update_score()","update_total_score()","applicationarchitecture"],"longSearchIndex":["inactiverecord","object","pickcontroller","picks","pollcontroller","polls","usercontroller","users","inactiverecord::all()","pollcontroller::all()","inactiverecord::belongs_to()","pollcontroller::close()","pollcontroller::conclude()","inactiverecord::create()","pickcontroller::create()","pollcontroller::create()","inactiverecord::create_from_results()","picks::create_from_results()","polls::create_from_results()","users::create_from_results()","pollcontroller::current()","inactiverecord::find()","object#get_and_clear_message()","inactiverecord::has_many()","inactiverecord::has_one()","usercontroller::login()","pollcontroller::matches()","picks::new()","polls::new()","users::new()","pollcontroller::parse_matches()","inactiverecord::parse_params()","usercontroller::register()","usercontroller::results()","inactiverecord#save()","pickcontroller::update_score()","usercontroller::update_total_score()",""],"info":[["InActiveRecord","","InActiveRecord.html","","<p>The <code>InActiveRecord</code> class handles all the operations that the\nmodels have to implement so they can communicate …\n"],["Object","","Object.html","",""],["PickController","","PickController.html","","<p>The <code>PickController</code> class handles the communication between the\nmodel <code>Picks</code> and the different views in …\n"],["Picks","","Picks.html","","<p>The <code>Picks</code> class represents an object that knows which results\na user expected for a certain pick\n"],["PollController","","PollController.html","","<p>The <code>PollController</code> class handles the communication between the\nmodel <code>Polls</code> and the different views in …\n"],["Polls","","Polls.html","","<p>The <code>Polls</code> class represents an object that contains the match\ninformation for a certain Soccer Poll.  …\n"],["UserController","","UserController.html","","<p>The <code>UserController</code> class handles the communication between the\nmodel <code>Users</code> and the different views in …\n"],["Users","","Users.html","","<p>The <code>Users</code> class represents a user for the system. It contains\nthe user&#39;s unique name and password …\n"],["all","InActiveRecord","InActiveRecord.html#method-c-all","()","<p>Gets all the values for the current table in the database. Calls the\nadequate method to turn them into …\n"],["all","PollController","PollController.html#method-c-all","()","<p>Returns all the <code>Polls</code> contained in the DataBase, so the\nresults can be properly displayed.\n<p>Returns &mdash; An …\n\n"],["belongs_to","InActiveRecord","InActiveRecord.html#method-c-belongs_to","(name, var)","<p>Creates a new one-to-many relation, where the calling model is the Many and\nthe passed name refers to …\n"],["close","PollController","PollController.html#method-c-close","()","<p>Changes the current poll&#39;s status to closed, preventing users from\nentering new picks.\n<p>Returns &mdash; The …\n\n"],["conclude","PollController","PollController.html#method-c-conclude","(games)","<p>Changes the current poll&#39;s status to concluded, and calculates the\nscores for each of the picks for …\n"],["create","InActiveRecord","InActiveRecord.html#method-c-create","(params)","<p>Creates a new row in the database and a new instance of the required model,\nwith the given hash.\n<p>Parameters … &mdash; "],["create","PickController","PickController.html#method-c-create","(user_id, poll_id, amount, selected)","<p>Creates a new <code>Picks</code> instance from the information passed to\nit, or updates the information it contains …\n"],["create","PollController","PollController.html#method-c-create","(match_amount, matches)","<p>Creates a new <code>Polls</code> instance from the information passed to\nit.\n<p>Parameters &mdash; <p>match_amount &mdash; The amount of …\n"],["create_from_results","InActiveRecord","InActiveRecord.html#method-c-create_from_results","(results)","<p>“Virtual” method that must be implemented by any class that inherits from\nInActiveRecord.  …\n"],["create_from_results","Picks","Picks.html#method-c-create_from_results","(results)","<p>Creates as many new <code>Picks</code> instances from the results array\npassed to it by InActiveRecord::find or InActiveRecord::all …\n"],["create_from_results","Polls","Polls.html#method-c-create_from_results","(results)","<p>Creates as many new <code>Polls</code> instances from the results array\npassed to it by InActiveRecord::find or InActiveRecord::all …\n"],["create_from_results","Users","Users.html#method-c-create_from_results","(results)","<p>Creates as many new <code>Users</code> instances from the results array\npassed to it by InActiveRecord::find or InActiveRecord::all …\n"],["current","PollController","PollController.html#method-c-current","()","<p>Gets the “latest” poll, which is always the last or currently  active one.\n<p>Returns &mdash; The latest …\n\n"],["find","InActiveRecord","InActiveRecord.html#method-c-find","(params)","<p>Uses the given hash to find an element in the current table, with the\nrestrictions set in the hash.  …\n"],["get_and_clear_message","Object","Object.html#method-i-get_and_clear_message","()","<p>Helper method to obtain the message stored in session and clear it, so\nmessages are only shown once. …\n"],["has_many","InActiveRecord","InActiveRecord.html#method-c-has_many","(name)","<p>Creates a new many-to-one relation, where the calling model is the One and\nthe passed name refers to …\n"],["has_one","InActiveRecord","InActiveRecord.html#method-c-has_one","(name, var)","<p>Creates a new one-to-many relation, where the calling model is the Many and\nthe passed name refers to …\n"],["login","UserController","UserController.html#method-c-login","(username, password)","<p>Searches for a user with the provided values. If it is not found,  it\nprevents login. If it is, it returns …\n"],["matches","PollController","PollController.html#method-c-matches","()","<p>Parses the current Poll&#39;s matches so they can be displayed where\nnecessary.\n<p>Returns &mdash; An array containing …\n\n"],["new","Picks","Picks.html#method-c-new","(params)","<p>Creates a new <code>Picks</code> instance. This method is called through\nthe InActiveRecord::create method and should …\n"],["new","Polls","Polls.html#method-c-new","(params)","<p>Creates a new <code>Polls</code> instance. This method is called through\nthe InActiveRecord::create method and should …\n"],["new","Users","Users.html#method-c-new","(params)","<p>Creates a new <code>Users</code> instance. This method is called through\nthe InActiveRecord::create method and should …\n"],["parse_matches","PollController","PollController.html#method-c-parse_matches","(match_amount, matches)","<p>Parses a set of matches from the view to an array, with the team names\nseparated by a comma and a match …\n"],["parse_params","InActiveRecord","InActiveRecord.html#method-c-parse_params","(params)","<p>Parses the hash given into a query and an array of values the query refers\nto.\n<p>Parameters &mdash; <p>params &mdash; A hash …\n\n"],["register","UserController","UserController.html#method-c-register","(username, password)","<p>Creates a new <code>Users</code> instance from the information passed to\nit.\n<p>Parameters &mdash; <p>username &mdash; The user&#39;s unique …\n"],["results","UserController","UserController.html#method-c-results","()","<p>Returns the set of results for all the users, sorted by score. It contains\nthe results for each poll. …\n"],["save","InActiveRecord","InActiveRecord.html#method-i-save","()","<p>Saves the current instance to the database. If it is already present then\nit updates it, if not it creates …\n"],["update_score","PickController","PickController.html#method-c-update_score","(pick_id, score)","<p>Updates the score for the given pick, with the amount specified. This is\ncalled through <code>PollController</code> …\n"],["update_total_score","UserController","UserController.html#method-c-update_total_score","(user_id, score)","<p>Updates the total score for the indicated user. This method is called\nthrough <code>PickController</code> whenever …\n"],["Application Architecture","","Application Architecture_txt.html","","<p>Application Architecture\n<p>Here we present the general Architecture for our <em>Soccer</em>\n<em>Poll</em>. It follows an  …\n"]]}}